//.$file${.::QPmodel::blinky.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: blinkyQPmodel.qm
// File:  ${.::QPmodel::blinky.cpp}
//
// This code has been generated by QM 5.1.1 <www.state-machine.com/qm/>.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${.::QPmodel::blinky.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include "qpcpp.hpp" // QP/C++ framework API
#include "QPbsp.hpp"   // Board Support Package interface
#include "bsp.h"

using namespace QP;

// ask QM to declare the Blinky class ----------------------------------------
//.$declare${AOs::Blinky} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//.${AOs::Blinky} ............................................................
class Blinky : public QP::QActive {
private:
    QP::QTimeEvt m_timeEvt;

public:
    static Blinky instance;

public:
    Blinky();

protected:
    Q_STATE_DECL(initial);
    Q_STATE_DECL(WaitForButton);
    Q_STATE_DECL(off);
    Q_STATE_DECL(on);
};
//.$enddecl${AOs::Blinky} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

// opaque pointer to the Blinky active object --------------------------------
//.$skip${QP_VERSION} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//. Check for the minimum required QP version
#if (QP_VERSION < 690U) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8U))
#error qpcpp version 6.9.0 or higher required
#endif
//.$endskip${QP_VERSION} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
//.$define${AOs::AO_Blinky} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//.${AOs::AO_Blinky} .........................................................
QP::QActive * const AO_Blinky = &Blinky::instance;
//.$enddef${AOs::AO_Blinky} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

// ask QM to define the Blinky class (including the state machine) -----------
//.$define${AOs::Blinky} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//.${AOs::Blinky} ............................................................
Blinky Blinky::instance;
//.${AOs::Blinky::Blinky} ....................................................
Blinky::Blinky()
  : QActive(Q_STATE_CAST(&Blinky::initial)),
    m_timeEvt(this, TIMEOUT_SIG, 0U)
{}

//.${AOs::Blinky::SM} ........................................................
Q_STATE_DEF(Blinky, initial) {
    //.${AOs::Blinky::SM::initial}
    // arm the private time event to expire in 1/2s
    // and periodically every 1/2 second
    m_timeEvt.armX(QPBSP::TICKS_PER_SEC/2,
                   QPBSP::TICKS_PER_SEC/2);
    (void)e; // unused parameter

    QS_FUN_DICTIONARY(&Blinky::WaitForButton);
    QS_FUN_DICTIONARY(&Blinky::off);
    QS_FUN_DICTIONARY(&Blinky::on);

    return tran(&WaitForButton);
}
//.${AOs::Blinky::SM::WaitForButton} .........................................
Q_STATE_DEF(Blinky, WaitForButton) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Blinky::SM::WaitForButton}
        case Q_ENTRY_SIG: {
            QPBSP::ledOff();
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Blinky::SM::WaitForButton::BUTTON_PRESSED}
        case BUTTON_PRESSED_SIG: {
            BSP::debug("Button pressed\r\n");
            status_ = tran(&off);
            break;
        }
        //.${AOs::Blinky::SM::WaitForButton::BUTTON_RELEASED}
        case BUTTON_RELEASED_SIG: {
            BSP::debug("Button released\r\n");
            QPBSP::ledOff();
            status_ = Q_RET_HANDLED;
            break;
        }
        default: {
            status_ = super(&top);
            break;
        }
    }
    return status_;
}
//.${AOs::Blinky::SM::WaitForButton::off} ....................................
Q_STATE_DEF(Blinky, off) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Blinky::SM::WaitForButton::off}
        case Q_ENTRY_SIG: {
            QPBSP::ledOff();
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Blinky::SM::WaitForButton::off}
        case Q_EXIT_SIG: {
            QPBSP::ledOff();
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Blinky::SM::WaitForButton::off::TIMEOUT}
        case TIMEOUT_SIG: {
            status_ = tran(&on);
            break;
        }
        //.${AOs::Blinky::SM::WaitForButton::off::BUTTON_RELEASED}
        case BUTTON_RELEASED_SIG: {
            BSP::debug("Button released\r\n");
            QPBSP::ledOff();
            status_ = tran(&WaitForButton);
            break;
        }
        default: {
            status_ = super(&WaitForButton);
            break;
        }
    }
    return status_;
}
//.${AOs::Blinky::SM::WaitForButton::on} .....................................
Q_STATE_DEF(Blinky, on) {
    QP::QState status_;
    switch (e->sig) {
        //.${AOs::Blinky::SM::WaitForButton::on}
        case Q_ENTRY_SIG: {
            QPBSP::ledOn();
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Blinky::SM::WaitForButton::on}
        case Q_EXIT_SIG: {
            QPBSP::ledOff();
            status_ = Q_RET_HANDLED;
            break;
        }
        //.${AOs::Blinky::SM::WaitForButton::on::TIMEOUT}
        case TIMEOUT_SIG: {
            status_ = tran(&off);
            break;
        }
        //.${AOs::Blinky::SM::WaitForButton::on::BUTTON_RELEASED}
        case BUTTON_RELEASED_SIG: {
            BSP::debug("Button released\r\n");
            QPBSP::ledOff();
            status_ = tran(&WaitForButton);
            break;
        }
        default: {
            status_ = super(&WaitForButton);
            break;
        }
    }
    return status_;
}
//.$enddef${AOs::Blinky} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
