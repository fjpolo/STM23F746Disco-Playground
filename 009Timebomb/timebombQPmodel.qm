<?xml version="1.0" encoding="UTF-8"?>
<model version="5.1.1" links="0">
 <documentation>About this example:
-------------------
https://www.youtube.com/watch?v=EBSxZKjgBXI
https://www.youtube.com/watch?v=RGQRllvrMyY
https://www.youtube.com/watch?v=E2Im7jLDDG4
https://www.youtube.com/watch?v=dwRsgSBcawU&amp;t=881s
https://www.youtube.com/watch?v=FCymm6PBtOs

Building the example:
---------------------

Running the example:
--------------------
</documentation>
 <framework name="qpcpp"/>
 <package name="AOs" stereotype="0x02">
  <class name="Timebomb" superclass="qpcpp::QActive">
   <attribute name="m_timeEvt" type="QP::QTimeEvt" visibility="0x02" properties="0x00"/>
   <attribute name="instance" type="Timebomb" visibility="0x00" properties="0x01"/>
   <operation name="Timebomb" type="" visibility="0x00" properties="0x00">
    <documentation>Blinky constructor</documentation>
    <code>  : QActive(Q_STATE_CAST(&amp;Timebomb::initial)),
    m_timeEvt(this, TIMEOUT_SIG, 0U)</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action>QPBSP::ledOff();</action>
     <initial_glyph conn="2,3,5,0,38,16">
      <action box="0,-2,45,13"/>
     </initial_glyph>
    </initial>
    <state name="WaitForButton">
     <tran trig="BUTTON_PRESSED" target="../../2">
      <action>/*UART debug*/
BSP::debug(&quot;Button pressed\r\n&quot;);
/*Reset counter*/
blinkyCounter = 5;</action>
      <tran_glyph conn="2,27,3,1,52,25,-2">
       <action box="0,-2,50,9"/>
      </tran_glyph>
     </tran>
     <tran trig="BUTTON_RELEASED">
      <action>BSP::debug(&quot;Button released\r\n&quot;);
QPBSP::ledOff();</action>
      <tran_glyph conn="2,40,3,-1,35">
       <action box="0,-2,20,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,19,50,27"/>
    </state>
    <state name="blink">
     <entry>/*LED on*/
QPBSP::ledOn();
/*arm the private time event to expire in 1/2s and nonperiodically*/
m_timeEvt.armX(QPBSP::TICKS_PER_SEC/2,0);</entry>
     <tran trig="TIMEOUT" target="../../3">
      <tran_glyph conn="2,62,3,1,52,8,-2">
       <action box="0,-2,8,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,48,50,16">
      <entry box="1,2,49,10"/>
     </state_glyph>
    </state>
    <state name="pause">
     <entry>/*LED off*/
QPBSP::ledOff();
/*arm the private time event to expire in 1/2s and nonperiodically*/
m_timeEvt.armX(QPBSP::TICKS_PER_SEC/2,0);</entry>
     <tran trig="TIMEOUT">
      <action>/*debug*/
BSP::debug(&quot;%d...&quot;, blinkyCounter);
/*Decrement counter*/
--blinkyCounter;</action>
      <choice target="../../../2">
       <guard>blinkyCounter &gt; 0</guard>
       <choice_glyph conn="60,80,4,1,-26,-8">
        <action box="2,-16,14,4"/>
       </choice_glyph>
      </choice>
      <choice target="../../../4">
       <guard brief="else"/>
       <choice_glyph conn="60,80,4,1,23,-8">
        <action box="2,4,10,2"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="2,80,3,-1,58">
       <action box="0,-2,37,8"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,66,50,20">
      <entry box="1,2,49,10"/>
     </state_glyph>
    </state>
    <state name="boom">
     <entry>/*LED on*/
QPBSP::ledOn();
/*Make it BOOM*/
BSP::debug(&quot;\r\nBOOM!!!\r\n&quot;);</entry>
     <state_glyph node="2,99,50,15">
      <entry box="1,2,49,6"/>
     </state_glyph>
    </state>
    <state_diagram size="75,115"/>
   </statechart>
  </class>
  <attribute name="AO_Timebomb" type="QP::QActive * const" visibility="0x00" properties="0x00">
   <code>= &amp;Timebomb::instance;</code>
  </attribute>
 </package>
 <directory name=".">
  <directory name="QPmodel">
   <file name="timebomb.cpp">
    <text>#include &quot;qpcpp.hpp&quot; // QP/C++ framework API
#include &quot;QPbsp.hpp&quot;   // Board Support Package interface
#include &quot;bsp.h&quot;

using namespace QP;
static uint8_t blinkyCounter;

// ask QM to declare the Timebomb class ----------------------------------------
$declare${AOs::Timebomb}

// opaque pointer to the Timebomb active object --------------------------------
$define${AOs::AO_Timebomb}

// ask QM to define the Timebomb class (including the state machine) -----------
$define${AOs::Timebomb}</text>
   </file>
   <file name="QPbsp.hpp">
    <text>#ifndef QPBSP_HPP
#define QPBSP_HPP

// a very simple Board Support Package (BSP) -------------------------------
class QPBSP {
public:
    enum { TICKS_PER_SEC = 100 }; // number of clock ticks in a second
    static void init(void);
    static void ledOff(void);
    static void ledOn(void);
    static void readButton(void);
};

enum BlinkySignals {
    TIMEOUT_SIG = QP::Q_USER_SIG, // offset the first signal
    BUTTON_PRESSED_SIG,
    BUTTON_RELEASED_SIG,
    MAX_SIG
};

// active object(s) used in this application -------------------------------
$declare${AOs::AO_Timebomb}

#endif // QPBSP_HPP</text>
   </file>
   <file name="QPbsp.cpp">
    <text>//.$file${.::QPmodel::QPbsp.cpp} vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
//
// Model: blinkyQPmodel.qm
// File:  ${.::QPmodel::QPbsp.cpp}
//
// This code has been generated by QM 5.1.1 &lt;www.state-machine.com/qm/&gt;.
// DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
//
// This program is open source software: you can redistribute it and/or
// modify it under the terms of the GNU General Public License as published
// by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
// or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
// for more details.
//
//.$endhead${.::QPmodel::QPbsp.cpp} ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#include &quot;qpcpp.hpp&quot;  // QP/C++ framework API
#include &quot;QPbsp.hpp&quot;    // Board Support Package interface
#include &lt;iostream&gt;   // for cout/cerr
#include &lt;cstdlib&gt;    // for exit()
#include &quot;bsp.h&quot;


using namespace std;
using namespace QP;

static BSP::MainData_t MainData;

// ISRs used in this project =================================================
extern &quot;C&quot; {

//............................................................................
void SysTick_Handler(void); // prototype
void SysTick_Handler(void) {
    QK_ISR_ENTRY();   // inform QK about entering an ISR
    QF::TICK_X(0U, nullptr); // process time events for rate 0
    HAL_IncTick();
    QK_ISR_EXIT();  // inform QK about exiting an ISR
}

} // extern &quot;C&quot;

void QPBSP::init(void)   {
    BSP::Init(&amp;MainData);
    //BSP::debug(&quot;\rHello World\r\n&quot;);
}
void QPBSP::ledOff(void) {
    MainData.userLED-&gt;setPinLow();

}
void QPBSP::ledOn(void)  {
    MainData.userLED-&gt;setPinHigh();
}
    void QPBSP::readButton(void){
    static BSP::GPIOPinState pinState{BSP::GPIOPinState::PinLow}, lastPinState{BSP::GPIOPinState::PinLow};
    pinState = MainData.userButton-&gt;readPin();
    if( (pinState == BSP::GPIOPinState::PinHigh) &amp;&amp; (pinState != lastPinState) ){
        QP::QEvt evt;
        evt.sig = BUTTON_PRESSED_SIG;
        AO_Timebomb-&gt;post_(&amp;evt, QP::QF_NO_MARGIN);
    }
    else if(pinState != lastPinState){
        QP::QEvt evt;
        evt.sig = BUTTON_RELEASED_SIG;
        AO_Timebomb-&gt;post_(&amp;evt, QP::QF_NO_MARGIN);
    }
    lastPinState = pinState;
}

// callback functions needed by the framework --------------------------------
void QF::onStartup(void) {
    // set up the SysTick timer to fire at BSP::TICKS_PER_SEC rate
    SysTick_Config(SystemCoreClock / QPBSP::TICKS_PER_SEC);

    // assing all priority bits for preemption-prio. and none to sub-prio.
    NVIC_SetPriorityGrouping(0U);

    // set priorities of ALL ISRs used in the system, see NOTE1
    //
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!! CAUTION !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // Assign a priority to EVERY ISR explicitly by calling NVIC_SetPriority().
    // DO NOT LEAVE THE ISR PRIORITIES AT THE DEFAULT VALUE!
    //
    NVIC_SetPriority(USART1_IRQn,  0U); // kerel unaware interrupt
    //NVIC_SetPriority(GPIO_EVEN_IRQn, QF_AWARE_ISR_CMSIS_PRI);
    NVIC_SetPriority(SysTick_IRQn, QF_AWARE_ISR_CMSIS_PRI + 1U);
    // ...

    // enable IRQs...
    //NVIC_EnableIRQ(GPIO_EVEN_IRQn);
#ifdef Q_SPY
    NVIC_EnableIRQ(USART1_IRQn); // UART1 interrupt used for QS-RX
#endif
}
void QK::onIdle(){
    /*Read user button*/
    QPBSP::readButton();
}
void QP::QF::onCleanup(void) {}
//void QP::QF_onClockTick(void) {
//    QF::TICK_X(0U, 0); // QF clock tick processing for rate 0
//}
void Q_onAssert(char const * const module, int loc) {
    //cerr &lt;&lt; &quot;Assertion failed in &quot; &lt;&lt;  module &lt;&lt; &quot;:&quot; &lt;&lt; loc &lt;&lt; endl;
    exit(-1);
}
</text>
   </file>
   <file name="main.cpp">
    <text>b#include &quot;qpcpp.hpp&quot; // QP/C++ framework API
#include &quot;bsp.hpp&quot;   // Board Support Package interface

using namespace QP;

// the main function ---------------------------------------------------------
int main() {
    QF::init();      // initialize the framework
    QPBSP::init();   // initialize the BSP

    // start the Timebomb active object
    static QEvt const *timebomb_queueSto[10];             // event queue buffer for Blinky
    AO_Timebomb-&gt;start( 1U,                               // priority of the active object
                        timebomb_queueSto,                // event queue buffer
                        Q_DIM(timebomb_queueSto),           // the length of the buffer
                        (void *)0, 0U);                   // private stack (not used on the desktop)

    return QF::run(); // let the framework run the application
}</text>
   </file>
   <file name="Makefile">
    <text># Makefile for building QP/C++ application on Windows and POSIX hosts
#
# examples of invoking this Makefile:
# building configurations: Debug (default), Release, and Spy
# make
# make CONF=rel
# make CONF=spy
# make clean   # cleanup the build
# make CONF=spy clean   # cleanup the build
#
# NOTE:
# To use this Makefile on Windows, you will need the GNU make utility, which
# is included in the QTools collection for Windows, see:
#    http://sourceforge.net/projects/qpc/files/QTools/
#

#-----------------------------------------------------------------------------
# project name:
#
PROJECT := blinky

#-----------------------------------------------------------------------------
# project directories:
#

# list of all source directories used by this project
VPATH := . \

# list of all include directories needed by this project
INCLUDES := -I. \

# location of the QP/C framework (if not provided in an env. variable)
ifeq ($(QPCPP),)
QPCPP := ../../..
endif

#-----------------------------------------------------------------------------
# project files:
#

# C source files...
C_SRCS :=

# C++ source files...
CPP_SRCS := \
    blinky.cpp \
    bsp.cpp \
    main.cpp

LIB_DIRS  :=
LIBS      :=

# defines...
# QP_API_VERSION controls the QP API compatibility; 9999 means the latest API
DEFINES   := -DQP_API_VERSION=9999

ifeq (,$(CONF))
    CONF := dbg
endif

#-----------------------------------------------------------------------------
# add QP/C++ framework (depends on the OS this Makefile runs on):
#
ifeq ($(OS),Windows_NT)

# NOTE:
# For Windows hosts, you can choose:
# - the single-threaded QP/C++ port (win32-qv) or
# - the multithreaded QP/C++ port (win32).
#
QP_PORT_DIR := $(QPCPP)/ports/win32-qv
#QP_PORT_DIR := $(QPCPP)/ports/win32
LIB_DIRS += -L$(QP_PORT_DIR)/$(CONF)
LIBS     += -lqp -lws2_32

else

# NOTE:
# For POSIX hosts (Linux, MacOS), you can choose:
# - the single-threaded QP/C++ port (win32-qv) or
# - the multithreaded QP/C++ port (win32).
#
QP_PORT_DIR := $(QPCPP)/ports/posix-qv
#QP_PORT_DIR := $(QPCPP)/ports/posix

CPP_SRCS += \
    qep_hsm.cpp \
    qep_msm.cpp \
    qf_act.cpp \
    qf_actq.cpp \
    qf_defer.cpp \
    qf_dyn.cpp \
    qf_mem.cpp \
    qf_ps.cpp \
    qf_qact.cpp \
    qf_qeq.cpp \
    qf_qmact.cpp \
    qf_time.cpp \
    qf_port.cpp

QS_SRCS := \
    qs.cpp \
    qs_64bit.cpp \
    qs_rx.cpp \
    qs_fp.cpp \
    qs_port.cpp

LIBS += -lpthread

endif

#============================================================================
# Typically you should not need to change anything below this line

VPATH    += $(QPCPP)/src/qf $(QP_PORT_DIR)
INCLUDES += -I$(QPCPP)/include -I$(QPCPP)/src -I$(QP_PORT_DIR)

#-----------------------------------------------------------------------------
# GNU toolset:
#
# NOTE:
# GNU toolset (MinGW) is included in the QTools collection for Windows, see:
#     http://sourceforge.net/projects/qpc/files/QTools/
# It is assumed that %QTOOLS%\bin directory is added to the PATH
#
CC    := gcc
CPP   := g++
#LINK  := gcc    # for C programs
LINK  := g++   # for C++ programs

#-----------------------------------------------------------------------------
# basic utilities (depends on the OS this Makefile runs on):
#
ifeq ($(OS),Windows_NT)
    MKDIR      := mkdir
    RM         := rm
    TARGET_EXT := .exe
else ifeq ($(OSTYPE),cygwin)
    MKDIR      := mkdir -p
    RM         := rm -f
    TARGET_EXT := .exe
else
    MKDIR      := mkdir -p
    RM         := rm -f
    TARGET_EXT :=
endif

#-----------------------------------------------------------------------------
# build configurations...

ifeq (rel, $(CONF)) # Release configuration ..................................

BIN_DIR := build_rel
# gcc options:
CFLAGS  = -c -O3 -fno-pie -std=c99 -pedantic -Wall -Wextra -W \
    $(INCLUDES) $(DEFINES) -DNDEBUG

CPPFLAGS = -c -O3 -fno-pie -std=c++11 -pedantic -Wall -Wextra \
    -fno-rtti -fno-exceptions \
    $(INCLUDES) $(DEFINES) -DNDEBUG

else ifeq (spy, $(CONF))  # Spy configuration ................................

BIN_DIR := build_spy

CPP_SRCS += $(QS_SRCS)
VPATH    += $(QPCPP)/src/qs

# gcc options:
CFLAGS  = -c -g -O -fno-pie -std=c99 -pedantic -Wall -Wextra -W \
    $(INCLUDES) $(DEFINES) -DQ_SPY

CPPFLAGS = -c -g -O -fno-pie -std=c++11 -pedantic -Wall -Wextra \
    -fno-rtti -fno-exceptions \
    $(INCLUDES) $(DEFINES) -DQ_SPY

else # default Debug configuration .........................................

BIN_DIR := build

# gcc options:
CFLAGS  = -c -g -O -fno-pie -std=c99 -pedantic -Wall -Wextra -W \
    $(INCLUDES) $(DEFINES)

CPPFLAGS = -c -g -O -fno-pie -std=c++11 -pedantic -Wall -Wextra \
    -fno-rtti -fno-exceptions \
    $(INCLUDES) $(DEFINES)

endif  # .....................................................................

LINKFLAGS := -no-pie

#-----------------------------------------------------------------------------
C_OBJS       := $(patsubst %.c,%.o,   $(C_SRCS))
CPP_OBJS     := $(patsubst %.cpp,%.o, $(CPP_SRCS))

TARGET_EXE   := $(BIN_DIR)/$(PROJECT)$(TARGET_EXT)
C_OBJS_EXT   := $(addprefix $(BIN_DIR)/, $(C_OBJS))
C_DEPS_EXT   := $(patsubst %.o,%.d, $(C_OBJS_EXT))
CPP_OBJS_EXT := $(addprefix $(BIN_DIR)/, $(CPP_OBJS))
CPP_DEPS_EXT := $(patsubst %.o,%.d, $(CPP_OBJS_EXT))

# create $(BIN_DIR) if it does not exist
ifeq (&quot;$(wildcard $(BIN_DIR))&quot;,&quot;&quot;)
$(shell $(MKDIR) $(BIN_DIR))
endif

#-----------------------------------------------------------------------------
# rules
#

all: $(TARGET_EXE)

$(TARGET_EXE) : $(C_OBJS_EXT) $(CPP_OBJS_EXT)
    $(CPP) $(CPPFLAGS) $(QPCPP)/include/qstamp.cpp -o $(BIN_DIR)/qstamp.o
    $(LINK) $(LINKFLAGS) $(LIB_DIRS) -o $@ $^ $(BIN_DIR)/qstamp.o $(LIBS)

$(BIN_DIR)/%.d : %.c
    $(CC) -MM -MT $(@:.d=.o) $(CFLAGS) $&lt; &gt; $@

$(BIN_DIR)/%.d : %.cpp
    $(CPP) -MM -MT $(@:.d=.o) $(CPPFLAGS) $&lt; &gt; $@

$(BIN_DIR)/%.o : %.c
    $(CC) $(CFLAGS) $&lt; -o $@

$(BIN_DIR)/%.o : %.cpp
    $(CPP) $(CPPFLAGS) $&lt; -o $@

.PHONY : clean show

# include dependency files only if our goal depends on their existence
ifneq ($(MAKECMDGOALS),clean)
  ifneq ($(MAKECMDGOALS),show)
-include $(C_DEPS_EXT) $(CPP_DEPS_EXT)
  endif
endif

.PHONY : clean show

clean :
    -$(RM) $(BIN_DIR)/*.o \
    $(BIN_DIR)/*.d \
    $(TARGET_EXE)

show :
    @echo PROJECT      = $(PROJECT)
    @echo TARGET_EXE   = $(TARGET_EXE)
    @echo VPATH        = $(VPATH)
    @echo C_SRCS       = $(C_SRCS)
    @echo CPP_SRCS     = $(CPP_SRCS)
    @echo C_DEPS_EXT   = $(C_DEPS_EXT)
    @echo C_OBJS_EXT   = $(C_OBJS_EXT)
    @echo C_DEPS_EXT   = $(C_DEPS_EXT)
    @echo CPP_DEPS_EXT = $(CPP_DEPS_EXT)
    @echo CPP_OBJS_EXT = $(CPP_OBJS_EXT)
    @echo LIB_DIRS     = $(LIB_DIRS)
    @echo LIBS         = $(LIBS)
    @echo DEFINES      = $(DEFINES)

</text>
   </file>
  </directory>
 </directory>
</model>
